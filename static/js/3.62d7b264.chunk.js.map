{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","Post","props","className","s","item","src","message","likeCounts","maxLength10","maxLengthCreator","MyPostsReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPosts","React","memo","console","log","postsElements","posts","reverse","map","p","id","MyPostsWrapper","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onChange","e","currentTarget","value","onBlur","updateStatus","ProfileInfo","profile","avaWrapper","photos","large","getStatus","ava","small","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Preloader","Profile","ProfileContent","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getProfile","Component","compose","auth","isAuth","withRouter","withAuthRedirect"],"mappings":"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","file":"static/js/3.62d7b264.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainPicture\":\"ProfileInfo_mainPicture__1Dbgg\",\"ava\":\"ProfileInfo_ava__28KBe\",\"avaWrapper\":\"ProfileInfo_avaWrapper__3yczM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MyPostsWrapper\":\"MyPosts_MyPostsWrapper__3oRWj\",\"posts\":\"MyPosts_posts__3vga_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__yK_Xg\"};","import s from \"./Post.module.css\";\r\n\r\nconst Post = (props) => {\r\n  \r\n  return (\r\n    <div className={s.item}>\r\n      <img src=\"https://avatars.mds.yandex.net/get-zen_doc/3512693/pub_5efb3ff066fe1d5006536937_5efb4be4cdd4d637ce0fd2e8/scale_1200\"></img>\r\n      { props.message }\r\n      <div>\r\n        <span>{props.likeCounts} like</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import s from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport React from \"react\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { maxLengthCreator, required } from \"../../../utils/validators/validators\";\r\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst addNewPostForm = (props) => {\r\n  return (\r\n      <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n          <Field component={Textarea} name=\"newPostText\"  placeholder=\"New post\"\r\n            validate={[required, maxLength10]} />\r\n        </div>\r\n        <div>\r\n          <button>Add post</button>\r\n        </div>\r\n      </form>\r\n  )\r\n}\r\n\r\nconst MyPostsReduxForm = reduxForm({\r\n  //a unique name for the form\r\n  form: \"post\"\r\n})(addNewPostForm);\r\n\r\nconst MyPosts = React.memo((props) => {\r\n  console.log(\"render\");\r\n  let postsElements = \r\n    \r\n    [...props.posts]\r\n      .reverse()\r\n        .map( p => <Post likeCounts={p.likeCounts} message={p.message} key={p.id}/>);\r\n\r\n  const onAddPost = (values) => {\r\n    props.addPost(values.newPostText);\r\n }  \r\n\r\n  return (\r\n    <div className={s.MyPostsWrapper}>\r\n      <h3>My posts</h3>\r\n      <MyPostsReduxForm onSubmit={onAddPost}/>\r\n      <div className={s.posts}>\r\n        { postsElements }\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\n\r\n\r\n\r\n\r\nexport default MyPosts\r\n\r\n","import React from \"react\";\r\nimport {addPostActionCreator, updateNewPostTextActionCreator\r\n} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport  { connect } from \"react-redux\";\r\n\r\n// const MyPostsContainer = () => {\r\n//   return (\r\n//     <StoreContext.Consumer>\r\n//       {(store) => {\r\n//         let state = store.getState();\r\n//         let addPost = () => {\r\n//           store.dispatch(addPostActionCreator());\r\n//         };\r\n//         let onPostChange = (text) => {\r\n//           let action = updateNewPostTextActionCreator(text);\r\n//           store.dispatch(action);\r\n//         };\r\n//         return (\r\n//           <MyPosts\r\n//             updateNewPostText={onPostChange}\r\n//             addPost={addPost}\r\n//             posts={state.profilePage.posts}\r\n//             newPostText={state.profilePage.newPostText}\r\n//           />\r\n//         );\r\n//       }}\r\n//     </StoreContext.Consumer>\r\n//   );\r\n// };\r\n\r\nlet mapStateToProps = (state)=>{\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText\r\n  }\r\n};\r\nlet mapDispatchToProps = (dispatch)=>{\r\n  return {\r\n    addPost: (newPostText)=>{\r\n      dispatch(addPostActionCreator(newPostText))\r\n    }\r\n  }\r\n}\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","import s from \"./ProfileInfo.module.css\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [status, setStatus] = useState(props.status);\r\n\r\n  useEffect( () => {\r\n    setStatus(props.status);\r\n  }, [props.status])\r\n \r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  }\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status);\r\n  }\r\n  const onStatusChange = (e) => {\r\n    setStatus(e.currentTarget.value);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      { !editMode &&\r\n        <div>\r\n          <span onDoubleClick={activateEditMode}>\r\n            {props.status || \"-----\"}\r\n          </span>\r\n        </div>\r\n      }\r\n      { editMode && (\r\n        <div>\r\n          <input\r\n            autoFocus={true}\r\n            onChange={onStatusChange}\r\n            onBlur={deactivateEditMode}\r\n            value={status}\r\n          ></input>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import s from \"./ProfileInfo.module.css\";\r\nimport React from 'react';\r\nimport Preloader from \"../../common/preloader/Preloader\";\r\n// import ProfileStatus from \"./ProfileStatus\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\nconst ProfileInfo = (props) => {\r\n  \r\n  if (!props.profile) {\r\n    return <Preloader />\r\n  }\r\n  return (\r\n    <div>\r\n      <div>\r\n        {/* <img\r\n          className={s.mainPicture}\r\n          src=\"https://miro.medium.com/max/11730/0*ihTZPO4iffJ8n69_\"\r\n        ></img> */}\r\n      </div>\r\n      \r\n      <div className={s.avaWrapper}>\r\n      <div><img src={props.profile.photos.large}></img></div>\r\n      <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus} getStatus={props.getStatus}/>\r\n      \r\n        <img\r\n          className={s.ava}\r\n          src={props.profile.photos.small}\r\n        ></img>\r\n        <div><h4>{props.profile.fullName}</h4></div>\r\n        <div>{props.profile.aboutMe}</div>\r\n        \r\n        <div>Looking for a job: {props.profile.lookingForAJob? 'Yes' : 'No'}</div>\r\n        <div><div>Description</div> {props.profile.lookingForAJobDescription}</div>\r\n       \r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","import MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport s from \"./Profile.module.css\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\n\r\nconst Profile = (props) => {\r\n  \r\n  return (\r\n    <div className={s.ProfileContent}>\r\n      <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus} getStatus={props.getStatus}/>\r\n      <MyPostsContainer  />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getProfile } from \"../../redux/profile-reducer\";\r\nimport Profile from \"./Profile\";\r\nimport { Redirect, withRouter } from \"react-router\";\r\nimport { compose } from \"redux\";\r\nimport { getStatus, updateStatus } from \"../../redux/profile-reducer\"\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\n\r\nclass ProfileContainer extends React.Component{\r\n\r\n  componentDidMount() {\r\n    let userId = this.props.match.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId;\r\n      if (!userId) {\r\n        this.props.history.push(\"/login\");\r\n      }\r\n    }\r\n    this.props.getProfile(userId);\r\n    this.props.getStatus(userId);\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <Profile {...this.props} profile={this.props.profile} \r\n      status={this.props.status} \r\n      updateStatus={this.props.updateStatus}\r\n      />\r\n      \r\n    )\r\n  }\r\n};\r\nlet mapStateToProps = (state) => ({ \r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authorizedUserId: state.auth.userId,\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose(\r\n  \r\n  connect(mapStateToProps, {getProfile: getProfile, getStatus, updateStatus}),\r\n  withRouter,\r\n  withAuthRedirect\r\n)(ProfileContainer)"],"sourceRoot":""}